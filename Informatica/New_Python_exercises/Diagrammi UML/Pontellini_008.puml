@startuml
class Dish {
    + name: str
    + price: float
    + available: bool
    __
    + __init__(self, name: str, price: float, available: bool)
    + get_name(): str
    + set_name(name: str): void
    + get_price(): float
    + set_price(price: float): void
    + is_available(): bool
    + set_available(available: bool): void
    + __str__(): str
}

class Appetizer {
    + ingredients: list
    + portion: str
    __
    + __init__(self, name: str, price: float, ingredients: list, portion: str, available: bool = True)
    + get_ingredients(): list
    + set_ingredients(ingredients: list): void
    + get_portion(): str
    + set_portion(portion: str): void
    + __str__(): str
    + super().__init__(name, price, available)
}

class MainCourse {
    + type_of_pasta: str
    + sauce: str
    __
    + __init__(self, name: str, price: float, type_of_pasta: str, sauce: str, available: bool = True)
    + get_type_of_pasta(): str
    + set_type_of_pasta(type_of_pasta: str): void
    + get_sauce(): str
    + set_sauce(sauce: str): void
    + __str__(): str
    + super().__init__(name, price, available)
}

class SecondCourse {
    + type_of_meat: str
    + cooking: str
    __
    + __init__(self, name: str, price: float, type_of_meat: str, cooking: str, available: bool = True)
    + get_type_of_meat(): str
    + set_type_of_meat(type_of_meat: str): void
    + get_cooking(): str
    + set_cooking(cooking: str): void
    + __str__(): str
    + super().__init__(name, price, available)
}

class Dessert {
    + type_of_dessert: str
    + calories: int
    __
    + __init__(self, name: str, price: float, type_of_dessert: str, calories: int, available: bool = True)
    + get_type_of_dessert(): str
    + set_type_of_dessert(type_of_dessert: str): void
    + get_calories(): int
    + set_calories(calories: int): void
    + __str__(): str
    + super().__init__(name, price, available)
}

Dish <|-- Appetizer
Dish <|-- MainCourse
Dish <|-- SecondCourse
Dish <|-- Dessert
@enduml