@startuml

class Recipe {
    - name: str
    - preparation_time: float
    - ingredients: list
    - difficulty: str
    __
    + __init__(self, name: str, preparation_time: float, ingredients: list, difficulty: str, check_the_ingredients: bool)
    + get_name(): str
    + set_name(name: str): void
    + get_preparation_time(): float
    + set_preparation_time(preparation_time): float
    + get_ingredients(): list
    + set_ingredients(ingredients: list): void
    + get_difficulty(): str
    + set_difficulty(difficulty): void
    + add_an_ingredient(): void
}

class MainCourse {
    - type_of_pasta: str
    - sauce: str
    __
    + __init__(self, name: str, type_of_pasta: str, sauce: str)
    + get_type_of_pasta(): str
    + set_type_of_pasta(type_of_pasta: str): void
    + get_sauce(): str
    + set_sauce(sauce: str): void
    + __str__(): str
    + super().__init__(name, type_of_pasta, sauce)
}

class SecondCourse {
    - type_of_meat: str
    - cooking: str
    __
    + __init__(self, name: str, type_of_meat: str, cooking: str)
    + get_type_of_meat(): str
    + set_type_of_meat(type_of_meat: str): void
    + get_cooking(): str
    + set_cooking(cooking: str): void
    + __str__(): str
    + super().__init__(name, type_of_meat, cooking)
}

class Dessert {
    - type_of_dessert: str
    - sugar: float
    __
    + __init__(self, name: str, type_of_dessert: str, sugar: float)
    + get_type_of_dessert(): str
    + set_type_of_dessert(type_of_dessert: str): void
    + get_sugar(): float
    + set_sugar(sugar: float): void
    + __str__(): str
    + super().__init__(name, type_of_dessert, sugar)
}

Recipe <|-- MainCourse
Recipe <|-- SecondCourse
Recipe <|-- Dessert
@enduml